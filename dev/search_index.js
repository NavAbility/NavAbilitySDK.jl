var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NavAbilitySDK","category":"page"},{"location":"#NavAbilitySDK","page":"Home","title":"NavAbilitySDK","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NavAbilitySDK.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NavAbilitySDK]","category":"page"},{"location":"#NavAbilitySDK.Categorical","page":"Home","title":"NavAbilitySDK.Categorical","text":"mutable struct Categorical <: Distribution\n\nCategorical distribution specified by a set of probabilities summing up to 1.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.Client","page":"Home","title":"NavAbilitySDK.Client","text":"struct Client\n\nThe context for a session, made from a user, robot, and session. Users can have multiple robots and robots can have multiple sessions. So this indicates a unique session.\n\nDevNotes\n\nRename to SessionKey\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.Distribution","page":"Home","title":"NavAbilitySDK.Distribution","text":"abstract type Distribution\n\nAbstract parent type for all distributions.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.FullNormal","page":"Home","title":"NavAbilitySDK.FullNormal","text":"mutable struct FullNormal <: Distribution\n\nMultidimensional normal distribution specified by means and a covariance matrix.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.GraphVizApp","page":"Home","title":"NavAbilitySDK.GraphVizApp","text":"struct GraphVizApp\n\nHelper type for linking to App visualization of a factor graph for user:robot:session.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.InferenceType","page":"Home","title":"NavAbilitySDK.InferenceType","text":"abstract type InferenceType\n\nAbstract parent type for all InferenceTypes, which are the functions inside of factors.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.MapVizApp","page":"Home","title":"NavAbilitySDK.MapVizApp","text":"struct MapVizApp\n\nHelper type for linking to App visualization of geometric map for user:robot:session.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.MixtureInferenceType","page":"Home","title":"NavAbilitySDK.MixtureInferenceType","text":"struct MixtureInferenceType <: NavAbilitySDK.InferenceType\n\nInferenceType for MixtureData.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.Normal","page":"Home","title":"NavAbilitySDK.Normal","text":"mutable struct Normal <: Distribution\n\nOne dimensional normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.Pose2AprilTag4Corners","page":"Home","title":"NavAbilitySDK.Pose2AprilTag4Corners","text":"struct Pose2AprilTag4Corners <: NavAbilitySDK.InferenceType\n\nInferenceType for Pose2AprilTag4CornersData.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.Pose2Point2BearingRange","page":"Home","title":"NavAbilitySDK.Pose2Point2BearingRange","text":"struct Pose2Point2BearingRange <: NavAbilitySDK.InferenceType\n\nPose2Point2BearingRangeInferenceType is used to represent a bearing\n\nrange measurement.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.Rayleigh","page":"Home","title":"NavAbilitySDK.Rayleigh","text":"mutable struct Rayleigh <: Distribution\n\nOne dimensional Rayleigh distribution.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.Scope","page":"Home","title":"NavAbilitySDK.Scope","text":"struct Scope\n\nSome calls interact across multiple users, robots, and sessions. A scope allows you to specify these more complex contexts.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.SolveOptions","page":"Home","title":"NavAbilitySDK.SolveOptions","text":"struct SolveOptions\n\nSolver options including the solve key and whether the parametric solver should be used.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.Uniform","page":"Home","title":"NavAbilitySDK.Uniform","text":"mutable struct Uniform <: Distribution\n\nOne dimensional uniform distribution.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.ZInferenceType","page":"Home","title":"NavAbilitySDK.ZInferenceType","text":"struct ZInferenceType <: NavAbilitySDK.InferenceType\n\nZInferenceType is used by many factors as a common inference type that uses a single distribution to express a constraint between variables. Used by: Prior, LinearRelative, PriorPose2, PriorPoint2, Pose2Pose2, Point2Point2Range, etc.\n\n\n\n\n\n","category":"type"},{"location":"#NavAbilitySDK.LinearRelativeData-Tuple{}","page":"Home","title":"NavAbilitySDK.LinearRelativeData","text":"LinearRelativeData(; Z, kwargs...)\n\n\nCreate a ContinousScalar->ContinousScalar (also known as Pose1->Pose1) factor with a distribution Z representing the 1D relationship between the variables, e.g. Normal(1.0, 0.1).\n\nDefault value of Z = Normal(1.0, 0.1).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.MixtureData-Tuple{Any, NamedTuple, Vector{Float64}, Integer}","page":"Home","title":"NavAbilitySDK.MixtureData","text":"MixtureData(mechanics, components, probabilities, dims)\n\n\nCreate a Mixture factor type with an underlying factor type, a named set of distributions that should be mixed, the probabilities of each distribution (the mix), and the dimensions of the underlying factor (e.g. ContinuousScalar=1, Pose2Pose2=3, etc.).\n\nArgs:     mechanics (Type{FactorData}): The underlying factor data type, e.g. Pose2Pose2Data. NOTE: This will change in later versions      but for now it can be any of the FactorData classes (e,g, LinearRelative, not the object LinearRelative()).     components (NamedTuple): The named tuple set of distributions that     should be mixed, e.g. NamedTuple(hypo1=Normal(0, 2)), hypo2=Uniform(30, 55)).     probabilities (List[float]): The probabilities of each distribution (the mix), e.g. [0.4, 0.6].     dims (int): The dimensions of the underlying factor, e.g. for Pose2Pose2 it's 3.\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.Point2Point2RangeData-Tuple{}","page":"Home","title":"NavAbilitySDK.Point2Point2RangeData","text":"Point2Point2RangeData(; range, kwargs...)\n\n\nCreate a Point2->Point2 range factor with a 1D distribution:\n\nrange: The range from the pose to the point, default Normal(1, 1).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.Pose2AprilTag4CornersData-Tuple{Any, Vector{Float64}, Vector{Float64}}","page":"Home","title":"NavAbilitySDK.Pose2AprilTag4CornersData","text":"Pose2AprilTag4CornersData(\n    id,\n    corners,\n    homography;\n    K,\n    taglength,\n    kwargs...\n)\n\n\nCreate a AprilTags factor that directly relates a Pose2 to the information from an AprilTag reading. Corners need to be provided, homography and tag length are defaulted and can be overwritten.\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.Pose2Point2BearingRangeData-Tuple{}","page":"Home","title":"NavAbilitySDK.Pose2Point2BearingRangeData","text":"Pose2Point2BearingRangeData(; bearing, range, kwargs...)\n\n\nCreate a Pose2->Point2 bearing+range factor with 1D distributions:\n\nbearing: The bearing from the pose to the point, default Normal(0, 1).\nrange: The range from the pose to the point, default Normal(1, 1).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.Pose2Pose2Data-Tuple{}","page":"Home","title":"NavAbilitySDK.Pose2Pose2Data","text":"Pose2Pose2Data(; Z, kwargs...)\n\n\nCreate a Pose2->Pose2 factor with a distribution Z representing the (x,y,theta) relationship between the variables, e.g. FullNormal([1,0,0.3333*π], diagm([0.01,0.01,0.01])).\n\nDefault value of Z = FullNormal([1,0,0.3333*π], diagm([0.01,0.01,0.01])).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.Pose3Pose3Data-Tuple{}","page":"Home","title":"NavAbilitySDK.Pose3Pose3Data","text":"Pose3Pose3Data(; Z, kwargs...)\n\n\nCreate a Pose3->Pose3 factor with a distribution Z representing the (x,y,theta) relationship between the variables, e.g. FullNormal([1;zeros(5)], diagm(0.01*ones(6))).\n\nDefault value of Z = FullNormal(zeros(6), diagm(0.01*ones(6))).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.PriorData-Tuple{}","page":"Home","title":"NavAbilitySDK.PriorData","text":"PriorData(; Z, kwargs...)\n\n\nCreate a prior factor for a ContinuousScalar (a.k.a. Pose1) with a distribution Z representing 1D prior information,      e.g. Normal(0.0, 0.1).\n\nDefault value of Z = Normal(0.0, 0.1).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.PriorPoint2Data-Tuple{}","page":"Home","title":"NavAbilitySDK.PriorPoint2Data","text":"PriorPoint2Data(; Z, kwargs...)\n\n\nCreate a prior factor for a Point2 with a distribution Z representing (x,y) prior information,      e.g. FullNormal([0.0, 0.0.0], diagm([0.01, 0.01])).\n\nDefault value of Z = FullNormal([0.0, 0.0], diagm([0.01, 0.01])).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.PriorPose2Data-Tuple{}","page":"Home","title":"NavAbilitySDK.PriorPose2Data","text":"PriorPose2Data(; Z, kwargs...)\n\n\nCreate a prior factor for a Pose2 with a distribution Z representing (x,y,theta) prior information,      e.g. FullNormal([0.0, 0.0, 0.0], diagm([0.01, 0.01, 0.01])).\n\nDefault value of Z = FullNormal([0.0, 0.0, 0.0], diagm([0.01, 0.01, 0.01])).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.PriorPose3Data-Tuple{}","page":"Home","title":"NavAbilitySDK.PriorPose3Data","text":"PriorPose3Data(; Z, kwargs...)\n\n\nCreate a prior factor for a Pose3 with a distribution Z representing (x,y,z,i,j,k) prior information,      e.g. FullNormal(zeros(6), diagm(0.01*ones(6))).\n\nDefault value of Z = FullNormal(zeros(6), diagm(0.01*ones(6))).\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.ScatterAlignPose2Data","page":"Home","title":"NavAbilitySDK.ScatterAlignPose2Data","text":"ScatterAlignPose2Data(varType, cloud1, cloud2)\nScatterAlignPose2Data(varType, cloud1, cloud2, bw1)\nScatterAlignPose2Data(\n    varType,\n    cloud1,\n    cloud2,\n    bw1,\n    bw2;\n    mkd1,\n    mkd2,\n    kw_sap,\n    kwargs...\n)\n\n\nReturns <:FactorData\n\n\n\n\n\n","category":"function"},{"location":"#NavAbilitySDK._getSolverDataDict-Tuple{String, String}","page":"Home","title":"NavAbilitySDK._getSolverDataDict","text":"Internal utility function to create the correct solver data (variable data) given a variable type.\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.addVariable-Tuple{Any, Any, Union{AbstractString, Symbol}, Union{AbstractString, Symbol}}","page":"Home","title":"NavAbilitySDK.addVariable","text":"addVariable Add a variable to the NavAbility Platform service Example\n\naddVariable(client, context, \"x0\", NVA.Pose2)\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.createDownloadEvent-Tuple{NavAbilityClient, AbstractString, Base.UUID}","page":"Home","title":"NavAbilitySDK.createDownloadEvent","text":"createDownloadEvent(navAbilityClient, userId, fileId)\n\n\nRequest URLs for data blob download.\n\nArgs:   navAbilityClient (NavAbilityClient): The NavAbility client.   userId (String): The userId with access to the data.   fileId (String): The unique file identifier of the data blob.\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.createUploadEvent","page":"Home","title":"NavAbilitySDK.createUploadEvent","text":"createUploadEvent(navAbilityClient, filename, filesize)\ncreateUploadEvent(\n    navAbilityClient,\n    filename,\n    filesize,\n    parts\n)\n\n\nRequest URLs for data blob upload.\n\nArgs:   navAbilityClient (NavAbilityClient): The NavAbility client.   filename (String): file/blob name.   filesize (Int): total number of bytes to upload.    parts (Int): Split upload into multiple blob parts, FIXME currently only supports parts=1.\n\n\n\n\n\n","category":"function"},{"location":"#NavAbilitySDK.getStatusLatestEvent-Tuple{NavAbilityClient, String}","page":"Home","title":"NavAbilitySDK.getStatusLatestEvent","text":"getStatusLatestEvent(navAbilityClient, id)\n\n\nGet the latest status message for a request.\n\nArgs:     navAbilityClient (NavAbilityClient): The NavAbility client.     id (String): The ID of the request that you want the latest status on.\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.getStatusMessagesEvent-Tuple{NavAbilityClient, String}","page":"Home","title":"NavAbilitySDK.getStatusMessagesEvent","text":"getStatusMessagesEvent(navAbilityClient, id)\n\n\nGet all the statuses for a request.\n\nArgs:     navAbilityClient (NavAbilityClient): The NavAbility client.     id (String): The ID of the request that you want the statuses on.\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.getStatusesLatest-Tuple{NavAbilityClient, Vector{String}}","page":"Home","title":"NavAbilitySDK.getStatusesLatest","text":"getStatusesLatest(navAbilityClient, ids)\n\n\nHelper function to get a dictionary of all latest statues for a list of results.\n\nArgs:     navAbilityClient (NavAbilityClient): The NavAbility client.     ids (Vector{String}): A list of the IDS that you want statuses on.\n\n\n\n\n\n","category":"method"},{"location":"#NavAbilitySDK.waitForCompletion-Tuple{NavAbilityClient, AbstractVector{<:AbstractString}}","page":"Home","title":"NavAbilitySDK.waitForCompletion","text":"waitForCompletion(\n    navAbilityClient,\n    requestIds;\n    maxSeconds,\n    expectedStatuses,\n    exceptionMessage\n)\n\n\nWait for the requests to complete, poll until done.\n\nArgs:     requestIds (List[str]): The request IDs that should be polled.     maxSeconds (int, optional): Maximum wait time. Defaults to 60.     expectedStatus (str, optional): Expected status message per request.         Defaults to \"Complete\".\n\n\n\n\n\n","category":"method"}]
}
